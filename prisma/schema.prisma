// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                        String      @id @default(auto()) @map("_id") @db.ObjectId
  name                      String
  username                  String      @unique
  email                     String      @unique
  password                  String
  bio                       String?     @default("")
  site                      String      @default("")
  posts                     Post[]
  follower                  User[]      @relation("UserFollows", fields: [followerIDs], references: [id])
  followerIDs               String[]    @db.ObjectId
  following                 User[]      @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs              String[]    @db.ObjectId
  followingTags             Tag[]       @relation(fields: [tagId], references: [id])
  tagId                     String[]    @db.ObjectId
  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?
  verifyToken               String?
  verifyTokenExpiry         DateTime?
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  comment                   Comment[]
  replies                   Reply[]
  saved                     SavedPost[]
}

enum PostType {
  DRAFT
  PUBLISHED
}

model Post {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  path         String?
  image        String?
  content      Json?
  author       User      @relation(fields: [authorId], references: [id])
  authorId     String    @db.ObjectId
  tags         Tag[]     @relation(fields: [tagId], references: [id])
  tagId        String[]  @db.ObjectId
  comments     Comment[]
  views        Int       @default(0)
  type         PostType
  originalPost Post?     @relation("Translations", fields: [originalId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  originalId   String?   @db.ObjectId
  translations Post[]    @relation("Translations")
  language     String

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  saved     SavedPost[]
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  replies   Reply[]
}

model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  label       String
  value       String
  description String
  color       String
  User        User[]   @relation(fields: [userId], references: [id])
  userId      String[] @db.ObjectId
  Post        Post[]   @relation(fields: [postId], references: [id])
  postId      String[] @db.ObjectId
}
